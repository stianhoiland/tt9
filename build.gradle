buildscript {
	repositories {
		mavenCentral()
		google()
		maven {
		  url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:8.0.2'
		classpath 'gradle.plugin.at.zierler:yaml-validator-plugin:1.5.0'
	}
}
apply plugin: 'com.android.application'
apply plugin: 'at.zierler.yamlvalidator'

apply from: 'gradle/scripts/constants.gradle'
apply from: 'gradle/scripts/compress-languages.gradle'
apply from: 'gradle/scripts/validate-languages.gradle'
apply from: 'gradle/scripts/version-tools.gradle'

configurations.configureEach {
	// fixes 'duplicate class error', when using these combine: androidx.core:1.10.1, androidx.preference:1.2.0 and androidx.room:2.5.1
	// see: https://stackoverflow.com/questions/75274720/a-failure-occurred-while-executing-appcheckdebugduplicateclasses/75315276#75315276
	exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'

	yamlValidator {
		searchPaths = ['languages/definitions']
	}
}

dependencies {
	implementation 'androidx.core:core:1.10.1'
	implementation 'androidx.preference:preference:1.2.1'
	implementation 'androidx.room:room-runtime:2.5.2'
	annotationProcessor 'androidx.room:room-compiler:2.5.2'
}

repositories {
	mavenCentral()
	google()
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

tasks.register('validateLanguages') {
	mustRunAfter(validateYaml)
	inputs.dir fileTree(dir: LANGUAGES_DIR)
	outputs.file "${project.buildDir}/lang.validation.txt"

	doLast {
		validateLanguageFiles(DEFINITIONS_DIR, DICTIONARIES_DIR, outputs.files.singleFile, MAX_CHARS_PER_KEY)
	}
}


tasks.register('copyDefinitions', Copy) {
	mustRunAfter(validateLanguages)
	from DEFINITIONS_DIR
	include '*.yml'
	into DEFINITIONS_DIR.replace("${project.rootDir}", "${project.rootDir}/assets")
	filter { line -> line.replaceFirst("\\.[a-z]+\$", ".${COMPRESSED_DICTIONARY_EXTENSION}") }
}


tasks.register('compressDictionaries') {
	mustRunAfter(validateLanguages)
	inputs.dir fileTree(dir: DEFINITIONS_DIR)
	outputs.dir DICTIONARIES_DIR.replace("${project.rootDir}", "${project.rootDir}/assets")

	doLast {
		compressDictionaryFiles(DEFINITIONS_DIR, DICTIONARIES_DIR, outputs.files.singleFile.path, MAX_CHARS_PER_KEY, COMPRESSED_DICTIONARY_EXTENSION)
	}
}

clean {
	delete LANGUAGES_DIR.replace("${project.rootDir}", "${project.rootDir}/assets")
}

// using the exported Closures directly causes weird values, hence the extra wrappers here
def getVerCode = { -> return getVersionCode() }
def getVerName = { -> return getVersionName() }
def getVersionString = { flavor -> return flavor == 'debug' ? getDebugVersion() : getReleaseVersion() }

android {
	namespace "io.github.sspanak.tt9"

	defaultConfig {
		minSdkVersion 19
		//noinspection ExpiredTargetSdkVersion
		targetSdk 30
		compileSdk 33
		versionCode getVerCode()
		versionName getVerName()
	}

	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			resources.srcDirs = ['src']
			aidl.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
		}

		// Move the build types to build-types/<type>
		// For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
		// This moves them out of them default location under src/<type>/... which would
		// conflict with src/ being used by the main source set.
		// Adding new build types or product flavors should be accompanied
		// by a similar customization.
		debug.setRoot('build-types/debug')
		release.setRoot('build-types/release')
	}

	buildTypes {
		debug { data ->
			data.buildConfigField 'String', 'VERSION_FULL', "\"${getVersionString('debug')}\""
		}

		release { data ->
			data.buildConfigField 'String', 'VERSION_FULL', "\"${getVersionString('release')}\""

			debuggable false
			jniDebuggable false
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
		}
	}
	buildFeatures {
		renderScript false
		aidl true
	}


	applicationVariants.configureEach { variant ->
		tasks["generate${variant.name.capitalize()}Assets"]
			.dependsOn(compressDictionaries)
			.dependsOn(copyDefinitions)

		tasks.findByName('lintVitalAnalyzeRelease')?.mustRunAfter(compressDictionaries)?.mustRunAfter(copyDefinitions)
		tasks.findByName('lintAnalyzeDebug')?.mustRunAfter(compressDictionaries)?.mustRunAfter(copyDefinitions)
	}
}
